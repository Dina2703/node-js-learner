_____________IP Addresses  & Domains___________________

All computers connected to the Internet have a unique IP address to identify.

Some special computers are known as hosts, meaning they host websites on the Internet. If you create and publish a website it will be hosted on a computer somewhere and that computer will have an IP address to identify it. On that host computer we need to know its IP address to do it, if want ot connect to a server. To do it we could then type the IP into a browser if we wanted to  in the address bar to connect our server.
 IP address is a series of numbers,and we use Domain names  to mask these IP addresses.
 And when we type a domain name into a browser(in the address bar) and hit enter browser will find the IP address associated with it  and then it will use that IP to find the computer hosting the website and communicate with that and this way we can send requests and get back responses to and from it. 


____________GET_________________
 The type of request when we type something into the browser and hit enter that is a GET request. Every time when we go to a different web page either by a link or directly typing into the adress bar we're sending a GET request to the server to get a ceratin resource. 

_____________________HTTP _______________________
This communication between the server and the client browser is via HTTP(HyperText Transfer Protocol).
HTTP - is a set of instructions which dictate how communication occurs.


___________________CREATING A SERVER _______________________
in Node we manually create the server which lives on the backend of our website.
And this server that listens for request from the browser and then decides what responses to send to the browser.
Now we will focus on acreting a local server on our computer using node which can  then be used to actively listen for requestd and 
respond to them.

_________________Localhost____________________
* Localhost is like a domain name on the web(like google.com). 
Which takes us to a very specific IP address called a loopbakc IP address. This IP address 127.0.0.1 and it poits directly back to your own computer. That means when we're connecting to the local host domain in a browser, the browser connecting back to our own computer which is then acting as a host for our website.
So localhost means listen for requests coming to our own computer. This is how we use our own computer as a host when we're developing a website.

____________________Port Numbers_______________________
* Port numbers are like 'doors'(channels on our computer)  into a computer.
localhost:3000 --- sp when we use localhost we also type the port number, so browser then knows to connect to our own computer via this particular port number, which is where our server is going to listening. 

________________ Status Codes _______________________
Status codes describe the type of response sent to the browser
1XX - informational responses/ request received/ processing
2XX - OK/ success codes/successfully received
3XX - Resource moved/codes for redirects/ further action must ba taken
4XX - Not found/ client error codes/request doesn't have what it needs
5XX - Internal server error/Server error codes/ Server failed to fulfill a valid request
200 - OK,
301 - Resorce moved,
404 - Not found,
500 - internal server error

_________________NODEMON _______________________
nodemon and file name - (nodeman server) - it's going to listen for requests on port 3000's and it's set up a live reload server and it's watching our code, in every cahnge we make it automatically restarts the server. Now we can start nodemon server and work on our project without manually restarting the server. 



__________________EXPRESS ________________
Express is a framework that helps us to easily manage our routing requests server-side logic and reponses in a much elegant way, and it makes our code easier to read and update and extend.

________________________ejs tags________________________
<% const name = 'mario' %> this line going to run as JavaScript on the server side(not on the front end).
Now to use the value of the name constant - <%= name %>. When we're out putting a single value put = right after the opening ejs tag.
We use ejs tags for passing some kinda data to the browser, when rendering the view, pass a data as a second parameter.

_____________________EJS Templates______________________
EJS Templates are processed through the EJS view engine on the server.
Our View files live on the server and where we want render one through the browser that view files is passed into the view engine the EJS View Engine to be processed, the Engine looks for any knid of dynamic content, variables, loops conditions etc, then whenever it finds those it figures out the resulting HTML code fro those parts and in the end it spits out a valid HTML page based on the template we wrote and then the HTML page with the resulting data inside it will be returned to the Browser. THIS WHOLE PROCESS IS CALLED SERVER-SIDE RENDERING.

_____________________Middleware___________________
Code which runs (on the  server) between getting a request and sending a response.
When there is a multiple middleware codes middleware - runs from top to bottom in our code and it runs that way until we exit the process or explicity send a response to  the browser..
app.use(func) is generally used to run some middleware code. As  well as the app.get('/', func).

app.get('/', func) is only fires functions for get requests to a certain route.
app.use(func) method runs for evey type of request to all routes including POST requests.

_______________________Middleware Examples_______________________
* Logger middleware to log details of every request.
* Authentication check middleware for protected routes.
* Middleware to parse JSON data from requests.
* return 404 pages

______________________mongoDB_________________________________________________________________
---------NoSQL vs SQL--------------- they structure DATA differently. 
So sequel(SQL) databases use table, rows and columns to store records of data.
No sequel (NoSQL) databases make use of collections and documents. MongoBD is NoSQL database.
How the NoSQL works ---- it split up into collections and they are a bit like tables in SQL, each collection 
would be used to store a particular type of data for example: User Collection would store user documents, and Blog Collections  would store blog documents. You can have as many collections as you want, but important things is each one would contain only one type of document.
Each collection would store documents. Each document represents a single item of data. this data looks like JSON or JS object, kew-value pairs.
From our code we could connect to a collection like the User in MongoDB and then we could either save, read, update or delete documents inside the collection.

_______________MongoDB Setup $ Atlas_______________
There is a couple different options, that we can use. we can either install MongoDB on our computer locally and use and deploy that or we could use a cloud database which is already hosted for us and it quiet a lot easier for us to manage. We gonna use MongoDB Atlas.

How to start a project on MongoDB Atlas: 
1. Create Cluster. Give a Cluster  Name.
2. Create a database and a collection inside it. Click on "COLLECTIONS" and "Add My Own Data", name the Database(testProject) and Collection(like blogs), then click "Create".
3. Create a User, so we can use it for database access from our code, form the server side code. 
"+ ADD NEW DATABASE USER" give it a name and a password. And give it a "Read and Write to any database" access, then 'Add User'. Now only the valid user(Admin) can access our database.
4. Connect the database and and backend code. In Clusters tab click "CONNECT", and choose 'Connect your application'. Copy the connection string, and go back over your app.js file and under const app = express() create a new const (dbURI) and save the copied connection string as its value. Then replace <username> and <password> with actual username and password that your created as a Admin. And put the cluster into URI name ....mongodb.net/clusterNameGoesHere?retryWrites.....
5. To connect we will use Mongoose, to connect and interact with the database
(there is a other ways to connect database and backend)


____________________________Mongoose__________________________
* Mongoose is an ODM library - Object Document Mapping library.
Basically means that it wraps the standard MongoDB API and it provides us with a much easier way to connect to and communicate with database. now it does this by allwing us to create simple data models which have database query methods to create, get delete and update databased documents. Mongoose queries the correct database collection for us based on the name of the model we use and then it performs the action required and returns us a response. 
User.get(), User.findById(), Blog.deleteOne() methods.

-----------------------Schemas & Models -----------------------
* Schema defines the structure of a type of data / document.
    --- Properties and property types
    npm install mongoose (it's third- party library)
examples: 
User Schema: 
- name (string), required
- age (number)
- bio (string), required

Blog Schema: 
- title (string), required
- snippet (string), required
- body (string), required

The next thing is creating a MODEL based on that SCHEMA.
 * Models allow us to communicate with databse collections.
 example:
 Blog model created based on a blog schema. This blog modal will have static and instance methods --> get, save, delete, etc ---> data from the Blog's Collection.

STEPS: 
1. require("mongoose") returns a function which we store in 
------const mongoose = require("mongoose");
2. connect Mongoose to the database from MongoDb Cloud.
//it's an asynchronous task it goes out and it takes some time to do.
//we put app.listen() as callback for mongoose, to wait until the connection has been made by mongoose, the server starts listening for requests, because if user requests fro home page, we can't show that before the connection to the database has been established.
-------mongoose.connect(dbURI)
  .then((result) => app.listen(3000))
  .catch((err) => console.log(err));
3. Create a new Models folder inside your project folder. Inside create blog.js 
Inside the file: 
------const mongoose = require("mongoose");
const Schema = mongoose.Schema;// it's like a constuctor.
--------create Schema--------
const blogSchema = new Schema({
  title: {
    type: String,
    required: true,
  },
  snippet: {
    type: String,
    required: true,
  },
  body: {
    type: String,
    required: true,
  },
}, { timestamp: true });// this creates a new instance of a schema object. The first argument is object which is describes the structure of the document we want to store in our blogs collection. The second argument is optional, timestamp property which auto generates, and everytime we update or create a blog document, timestamp auto assigns values to those properties for us.
------------create Modal------------
4. Modal is a thing that surrounds the schema and then provides us with an interface by which to communicate with a database collection for that document type.
//Create a new const to store your model. The first argument is the name of this model, which is Blog in our case here, mongoose gonna look to this name and pluralize(means it will look Blogs) it and look for that collection inside the database whenever we use this name in the future to communicate with the database.
The sonde argument is the schema name we want to base this model on, what type of objects  and we're going to store inside this collection.
const Blog = mongoose.model('Blog', blogSchema )
5. Export this project from the file so we can use it.
module.exports = Blog;
6. Import the Blog to the app.js 
const Blog = require('./models/blog')
7. use the Blog modal to ceate a new instance of it, pass an object with properties we defined in Scheme structure
app.get("/add-blog", (req, res) => {
  const blog = new Blog({
    title: "new blog ",
    snippet: "about my new blog",
    body: "Lorem ipsum dolor sit amet consectetur",
  }); //use the Blog modal to create a new instance of it, pass an object with properties wh're defined in Scheme structure

  blog
    .save()       -- this saves data to the database (in mongodb Atlas)
    .then((result) => {
      res.send(result); // we need to send back the result, so we can see it in the browser. You can find the data if type localhost:3000/add-blog' on the URL bar.
    })
    .catch((err) => {
      console.log(err); // just in case if there is one.
    });
});
*****************EXAMPLES*******************
//adding a new blog. first create an instance of Blog, when use save() method on that instance(because, we need to save the new instance/blog to the collection)
app.get("/add-blog", (req, res) => {
  const blog = new Blog({
    title: "new blog #2",
    snippet: "about my new blog",
    body: "Lorem ipsum dolor sit amet consectetur",
  }); //use the Blog modal to create a new instance of it(since we're adding a new blog to the collection), pass an object with properties wh're defined in Scheme structure

  blog
    .save()
    .then((result) => {            // result is the data that comes from the database collection.
      res.send(result); // we need to send back the result, so we can see it in the browser.
    })
    .catch((err) => {
      console.log(err); // just in case if there is one.
    });
});

// get all the blogs from the collection.
// when we get the data, we call the find()method on the collection name, which is Blog (since we need all the data from that collection).
app.get("/all-blogs", (req, res) => {
  Blog.find()
    .then((result) => {
      res.send(result);
    })
    .catch((err) => {
      console.log(err);
    });
});

//find the sinlge blog from the collection
app.get("/single-blog", (req, res) => {
  Blog.findById("61e76aad885009380a77d03b")
    .then((result) => {
      res.send(result);
    })
    .catch((err) => {
      console.log(err);
    });
});

______________________REQUEST TYPES__________________________
GET requests --- to get a resource (from the server whether that be JSON data from the database or webpage).
POST requests --- to create new data in our database(ex, a new blog in our case).
DELETE requests --- to delete data from the database.
PUT requests --- to update existing data in the database.

--------- simple Route structure---------
localhost:3000/blogs                  GET
localhost:3000/blogs/create           GET
localhost:3000/blogs                 POST
localhost:3000/blogs/:id              GET (a single blog)
localhost:3000/blogs/:id           DELETE 
localhost:3000/blogs/:id              PUT 

-----------create.ejs file.snippet from the form-------------
      <form action="/blogs" method="POST">// when we submit this form, we send data as body with post request to this '/blogs' URL, we can access that on the server.
      <input type="text" id="title"  name='title' equired />// we use 'name' property to access the form data.
------app.js file---------
app.use(express.urlencoded({ extended: true }));// this middleware  comes with express, which passes data from the form into a  workable format that we can use and it attaches the data to req object in callback function which we're passing in POST request. 
{ extended: true } this is optional
urlencoded() method takes the URL encoded data that comes along for the ride(from the form) and it passes that into an object that we can use on the request object.
app.post('/blogs', (req, res) => {
req.body                //now, req.body contains all the data from the webform, that we submitted.
});

_____________________Route Parameters_______________________
* The variable parts of the route that may change value
localhost:3000/blogs/:id  -> id is variable, and its value could change. We want to be able to extract the variable value to see if it's an ID then we can query the database for the document with that ID and send it back to the user.
